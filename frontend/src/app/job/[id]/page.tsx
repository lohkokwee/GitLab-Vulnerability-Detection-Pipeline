"use client"

import { Ban } from "lucide-react"
import Link from "next/link"

import {
  Alert,
  AlertDescription,
  AlertTitle,
} from "@/components/ui/alert"
import { Button } from "@/components/ui/button"

import { TypographyH2 } from "@/components/shared/typography/typography-h2"
import { JobDataCard } from "@/components/detection/job-data-card"
import { IStatusScanJob } from "@/types/workers-status/status-scan-job"
import { JobStatusScanJobCard } from "@/components/detection/job-status-scan-job-card"

import { useStatusScanJob } from "@/hooks/use-status-scan-job"

const JobPage = ({ params }: { params: { id: string } }) => {
  const { statusScanJob, isError, error, isLoading } = useStatusScanJob(params.id)

  if (isError) return (
    <div className="space-y-4">
      {renderPageHero(params.id)}
      {renderErrorSection(error, params.id)}
    </div>
  )

  if (!isLoading && statusScanJob !== undefined) {
    return (
      <div className="space-y-4">
        {renderPageHero(params.id)}
        {renderJobSection(statusScanJob)}
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {renderPageHero(params.id)}
    </div>
  )

}

const renderPageHero = (id: string) => {
  return (
    <>
      <TypographyH2 text={`Job ${id}`} />
    </>
  )
}

const renderJobSection = (statusScanJob: IStatusScanJob) => {
  return (
    <div className="grid gap-4 md:grid-cols-2">
      <div className=""><JobDataCard job={statusScanJob.job} /></div>
      <div className=""><JobStatusScanJobCard statusScanJob={statusScanJob} /></div>
    </div>
   
  )
}

const renderJobSectionSkeleton = () => {

}

const renderErrorSection = (error: Error, id: string) => {
  const renderErrorRedirect = () => {
    return (
      <>
        Please try again or head to the
        <Button variant="link" asChild className="px-1 py-0">
          <Link href="/jobs">Jobs</Link>
        </Button>
        page to explore all other jobs.
      </>
    )
  }
  const renderErrorMessage = () => {
    if (error.name == "404") {
      return (
        <>
          Job with ID {id} cannot be found.
          {renderErrorRedirect()}
        </>
      )
    }
    return (
      <>
        Unable to provide any information for Job with ID {id}.
        {renderErrorRedirect()}
      </>
    )
  }

  return (
    <Alert>
      <Ban className="h-4 w-4" />
      <AlertTitle>Error...</AlertTitle>
      <AlertDescription>
        {renderErrorMessage()}
      </AlertDescription>
    </Alert>
  )
}

export default JobPage
"use client"

import { notFound } from "next/navigation"
import { ChevronLeft, ChevronRight } from "lucide-react"

import { JobDataCard } from "@/components/detection/job-data-card"
import { JobStatusScanJobCard } from "@/components/workers-status/status-scan-job-card"
import { PageTitle } from "@/components/shared/animations/page-header"
import { SecurityReportCard } from "@/components/security-report/security-report-card"
import { TooltipButton } from "@/components/shared/buttons/tooltip-button"

import { useStatusScanJob } from "@/hooks/use-status-scan-job"
import { useSecurityReport } from "@/hooks/use-security-report"
import { useStatusScanJobExists } from "@/hooks/use-status-scan-job-exists"

const JobPage = ({ params }: { params: { id: string } }) => {
  const prevId = `${Number(params.id) - 1}`
  const nextId = `${Number(params.id) + 1}`
  const {
    statusScanJob,
    isError: isStatusScanJobError,
    error: statusScanJobError,
    isLoading: isStatusScanJobLoading,
  } = useStatusScanJob({ dbJobId: params.id })
  const {
    securityReport,
    isError: isSecurityReportError,
    error: securityReportError,
    isLoading: isSecurityReportLoading
  } = useSecurityReport({ dbJobId: params.id })
  const {
    statusScanJobExists: nextStatusScanJobExists,
    isError: isNextStatusScanJobExistsError,
    isLoading: isNextStatusScanJobExistsLoading
  } = useStatusScanJobExists({ dbJobId: nextId })
  const {
    statusScanJobExists: prevStatusScanJobExists,
    isError: isPrevStatusScanJobExistsError,
    isLoading: isPrevStatusScanJobExistsLoading
  } = useStatusScanJobExists({ dbJobId: prevId })
  
  const renderJobSection = () => {
    if (!isStatusScanJobLoading && statusScanJob !== undefined) return (
      <div className="grid gap-4 md:grid-cols-2">
        <JobDataCard job={statusScanJob.job} />
        <JobStatusScanJobCard statusScanJob={statusScanJob} />
      </div>
    )
    return (
      <></>
    )
  }

  const renderSecurityReportSection = () => (
    !isStatusScanJobLoading 
      ? <SecurityReportCard
        securityReport={securityReport}
        isLoading={isSecurityReportLoading}
        isError={isSecurityReportError}
      />
      : <></>
  )

  if (isStatusScanJobError) return (
    notFound()
  )

  const renderJobNavigationUtility = () => {
    return (
      <div className="flex space-x-1">
        <TooltipButton
          tooltipValue="Navigate to the previous job"
          isIconButton
          icon={ChevronLeft}
          isLink
          href={`/job/${prevId}`}
          disabled={!prevStatusScanJobExists || isPrevStatusScanJobExistsLoading || isPrevStatusScanJobExistsError}
          buttonVariant="outline"
        />
        <TooltipButton
          tooltipValue="Navigate to the next job"
          isIconButton
          icon={ChevronRight}
          isLink
          href={`/job/${nextId}`}
          disabled={!nextStatusScanJobExists || isNextStatusScanJobExistsLoading || isNextStatusScanJobExistsError}
          buttonVariant="outline"
        />
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <PageTitle 
        title={`Job ${params.id}`}
        loadingTitle="Job"
        isLoading={isStatusScanJobLoading || isSecurityReportLoading}
        utilitySection={renderJobNavigationUtility()}
      />
      {renderJobSection()}
      {renderSecurityReportSection()}
    </div>
  )
}

export default JobPage
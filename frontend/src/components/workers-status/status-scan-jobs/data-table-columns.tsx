"use client"

import Link from "next/link"
import { ColumnDef } from "@tanstack/react-table"
import { ArrowUpDown, MoreHorizontal } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { IStatusScanJob } from "@/types/workers-status/status-scan-job"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import {
  AlertDialog,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Separator } from "@/components/ui/separator"


import { TypographyP } from "../../shared/typography/typography-p"
import { STATUSES } from "@/constants/workers-status/status-scan-job"
import { TypographyH4 } from "@/components/shared/typography/typography-h4"

const paginatedStatusScanJobsColumns: ColumnDef<IStatusScanJob>[] = [
  {
    accessorKey: "job_id",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          ID
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      )
    },
    cell: ({ row }) => {
      return (
        <div className="px-4">
          <TypographyP>
            {row.getValue("job_id")}
          </TypographyP>
        </div>
      )
    }
  },
  {
    id: "gl_job_id",
    accessorKey: "job.gl_job_id",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          GitLab Job ID
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      )
    },
    cell: ({ row }) => {
      return (
        <div className="px-4">
          <TypographyP className="font-mono">
            {row.original.job.gl_job_id}
          </TypographyP>
        </div>
      )
    }
  },
  {
    accessorKey: "overall_status",
    header: "Overall Status",
    cell: ({ row }) => {
      const status = STATUSES.find(
        (status) => status.value === row.getValue("overall_status")
      )

      if (!status) {
        return null
      }

      return (
        <div className="flex w-[100px] items-center">
          {status.icon && (
            <status.icon className="mr-2 h-4 w-4 text-muted-foreground" />
          )}
          <span>{status.label}</span>
        </div>
      )
    },
    filterFn: (row, id, value) => {
      return value.includes(row.getValue(id))
    },
  },
  // {
  //   accessorKey: "remarks",
  //   header: "Remarks",
  //   cell: ({ row }) => {
  //     const remarks = row.getValue("remarks")
  //     return remarks == null ? "-" : remarks
  //   }
  // },
  {
    id: "actions",
    cell: ({ row }) => {
      const statusScanJob = row.original
 
      return (
        <AlertDialog>
          <DropdownMenu>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" className="h-8 w-8 p-0">
                      <span className="sr-only">Open menu</span>
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                </TooltipTrigger>
                <TooltipContent>
                  <TypographyP>
                    Actions
                  </TypographyP>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem
                onClick={() => navigator.clipboard.writeText(statusScanJob.job_id.toString())}
              >
                Copy ID
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => navigator.clipboard.writeText(statusScanJob.job.gl_job_id)}
              >
                Copy GitLab Job ID
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link href={`/job/${statusScanJob.job_id}`}>
                  View job details
                </Link>
              </DropdownMenuItem>
              <AlertDialogTrigger asChild>
                <DropdownMenuItem>View remarks</DropdownMenuItem>
              </AlertDialogTrigger>
            </DropdownMenuContent>
          </DropdownMenu>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>
                <p className="scroll-m-20 text-xl font-semibold tracking-tight">
                  {`Job ${statusScanJob.job_id}`}
                </p>
              </AlertDialogTitle>
              <Separator />
              <AlertDialogDescription className="text-current font-mono">
                {statusScanJob.remarks !== undefined && statusScanJob.remarks !== "" && statusScanJob.remarks !== null
                  ? <TypographyP>statusScanJob.remarks</TypographyP>
                  : <TypographyP>No remarks available.</TypographyP>
                }
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <Button variant="link" asChild>
                <AlertDialogCancel>
                Close
                </AlertDialogCancel>
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )
    },
  },
]

export { paginatedStatusScanJobsColumns }

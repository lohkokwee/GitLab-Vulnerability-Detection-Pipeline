import {  ShieldAlert } from "lucide-react"

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import {
  Alert,
  AlertDescription,
  AlertTitle,
} from "@/components/ui/alert"
import { Separator } from "@/components/ui/separator"

import { DataBadge } from "@/components/shared/badges/data-badge"
import {
  ICVSSVector,
  IIdentifier,
  ILocation,
  IVulnerability,
  SeverityLevels,
} from "@/types/report/security-report"
import { SEVERITY_LEVELS_MAP } from "@/constants/report/security-report"

interface VulnerabilitiesAccordionProps {
  vulnerabilities: IVulnerability[]
}

const VulnerabilitiesAccordion = ({
  vulnerabilities
}: VulnerabilitiesAccordionProps) => {
  
  const renderIdentifierBadges = (
    identifiers: IIdentifier[]
  ) => {
    return (
      <div className="my-2">
        {identifiers.map((identifier) => (
          <DataBadge
            key={identifier.name}
            badgeTitle={identifier.name}
            badgeLink={
              identifier.url !== undefined
                ? identifier.url
                : `https://www.google.com/search?q=${identifier.name}`
            }
            badgeVariant="destructive"
          />
        ))}
      </div>
    )
  }

  const renderCVSSVectorBadges = (
    cvssVectors: ICVSSVector[] | undefined
  ) => {
    if (cvssVectors !== undefined) return (
      <div className="my-2">
        {cvssVectors.map((cvssVector) => (
          <DataBadge
            key={cvssVector.vector}
            badgeTitle={cvssVector.vector}
            badgeVariant="info"
            hoverBadgeContent={
              <div className="flex justify-between space-x-24">
                <p>Vendor</p>
                <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">{cvssVector.vendor}</p>
              </div>
            }
          />
        ))}
      </div>
    )
    return (
      <></>
    )
  }

  const renderLocationBadge = (
    location: ILocation,
    severity: SeverityLevels | undefined
  ) => {
    const severityMap = SEVERITY_LEVELS_MAP.find((mapper) => mapper.value == severity)

    return (
      <DataBadge
        badgeTitle={location.file}
        badgeVariant={severityMap !== undefined ? severityMap.badgeVariant : "outline"}
        hoverBadgeContent={
          <>
            <div className="flex justify-between space-x-24">
              <p>Severity</p>
              <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">
                {severityMap !== undefined
                  ? severityMap.value
                  : "NA"
                } 
              </p>
            </div>
            <Separator className="my-2" />
            <div className="flex justify-between space-x-24">
              <p>Start line</p>
              <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">{location.start_line}</p>
            </div>
            <div className="flex justify-between space-x-24">
              <p>End line</p>
              <p className="font-mono">{location.end_line}</p>
            </div>
            <div className="flex justify-between space-x-24">
              <p>Class name</p>
              <p className="font-mono">
                {location.class_name !== undefined
                  ? location.class_name
                  : "NA"
                }
              </p>
            </div>
            <div className="flex justify-between space-x-24">
              <p>Method name</p>
              <p className="font-mono">
                {location.method_name !== undefined
                  ? location.method_name
                  : "NA"
                }
              </p>
            </div>
          </>
        }
      />
    )
  }

  const renderVulnerabilityAccordionItem = (
    vulnerability: IVulnerability,
    key: string | number,
  ) => {
    return (
      <AccordionItem value={vulnerability.id} key={key}>
        <AccordionTrigger className="hover:no-underline">
          <span className="flex gap-2">
            <p className="font-mono leading-6 hover:font-bold">{vulnerability.id}</p>
            <span className="hidden md:block">{renderLocationBadge(vulnerability.location, vulnerability.severity)}</span>
          </span>
        </AccordionTrigger>
        <AccordionContent>
          <Alert>
            <ShieldAlert className="h-4 w-4" />
            <AlertTitle>{vulnerability.name}</AlertTitle>
            <AlertDescription className="mt-3 leading-loose">
              <div className="my-2">{vulnerability.description}</div>
              <Separator />
              {renderCVSSVectorBadges(vulnerability.cvss_vectors)}
              <Separator />
              {renderIdentifierBadges(vulnerability.identifiers)}
            </AlertDescription>
          </Alert>
        </AccordionContent>
      </AccordionItem>
    )
  }

  return (
    <Accordion type="multiple">
      {vulnerabilities.map((vulnerability) => (
        renderVulnerabilityAccordionItem(vulnerability, vulnerability.id)
      ))}
    </Accordion>
  )
}

export { VulnerabilitiesAccordion }

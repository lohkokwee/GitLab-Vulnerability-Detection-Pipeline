import { cn } from "@/lib/utils"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
} from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { Badge } from "@/components/ui/badge"
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card"

import { ISecurityReport } from "@/types/report/security-report"
import { PageTitle } from "@/components/shared/animations/page-header"
import { TypographyH3 } from "@/components/shared/typography/typography-h3"
import { SCAN_STATUS_MAP } from "@/constants/report/security-report"
import { VulnerabilitiesAccordion } from "./vulnerabilities-accordion"

interface SecurityReportCardProps extends React.ComponentProps<typeof Card> {
  securityReport?: ISecurityReport
  isLoading: boolean
}

const SecurityReportCard = ({
  securityReport,
  isLoading,
  className,
  ...props
}: SecurityReportCardProps) => {
  const renderVersionAccordionItem = () => (
    !isLoading && securityReport
      ? (
        <AccordionItem value="version">
          <AccordionTrigger><p className="font-mono">Version</p></AccordionTrigger>
          <AccordionContent>
            {securityReport.version}
          </AccordionContent>
        </AccordionItem>
      ) : (
        <></>
      )
  )

  const renderScanAccordionItem = () => {
    if (!isLoading && securityReport) {
      const scanStatus = SCAN_STATUS_MAP.find((status) => status.value == securityReport.scan.status)

      const renderScanPropertyPair = (
       label: string,
       value: string | undefined,
       badgeVariant: "success" | "info" | "secondary" | "destructive" | "default",
      ) => {
        return (
          <div className="flex justify-between align-middle gap-4 max-[425px]:block">
            <p className="my-auto">{label}</p>
            <div className="max-[425px]:flex max-[425px]:my-2">
              <Badge
                variant={badgeVariant} className="text-center">{value}</Badge>
            </div>
          </div>
        )
      }

      const renderScanFacility = (
        facility: "Scanner" | "Analyzer",
        name: string,
        id: string,
        version: string,
        vendor: string
      ) => (
        <div className="flex justify-between align-middle gap-4 max-[425px]:block">
          <p className="my-auto">{facility}</p>
          <div className="max-[425px]:flex max-[425px]:my-2">
            <HoverCard>
              <HoverCardTrigger>
                <Badge variant="info" className="text-center border-dashed border-black">{name}</Badge>
              </HoverCardTrigger>
              <HoverCardContent className="w-max max-sm:max-w-48">
                <div className="flex justify-between space-x-24">
                  <p>ID</p>
                  <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">{id}</p>
                </div>
                <div className="flex justify-between space-x-24">
                  <p>Version</p>
                  <p className="font-mono">{version}</p>
                </div>
                <div className="flex justify-between space-x-24">
                  <p>Vendor</p>
                  <p className="font-mono">{vendor}</p>
                </div>
              </HoverCardContent>
            </HoverCard>
          </div>
        </div>
      )

      return (
        <AccordionItem value="scan">
          <AccordionTrigger><p className="font-mono">Scan Metadata</p></AccordionTrigger>
          <AccordionContent>
            <div className="space-y-2">
              {renderScanPropertyPair("Scan status", scanStatus?.renderValue, scanStatus ? scanStatus.badgeVariant : "secondary")}
              {renderScanPropertyPair("Start time", securityReport.scan.start_time.replace("T", " "), "default")}
              {renderScanPropertyPair("End time", securityReport.scan.end_time.replace("T", " "), "default")}
              {renderScanPropertyPair("Type", securityReport.scan.type.toUpperCase(), "default")}
              {renderScanFacility(
                "Analyzer",
                securityReport.scan.analyzer.name,
                securityReport.scan.analyzer.id,
                securityReport.scan.analyzer.version,
                securityReport.scan.analyzer.vendor.name
              )}
              {renderScanFacility(
                "Scanner",
                securityReport.scan.scanner.name,
                securityReport.scan.scanner.id,
                securityReport.scan.scanner.version,
                securityReport.scan.scanner.vendor.name
              )}
            </div>
          </AccordionContent>
        </AccordionItem>
      )
    }
    return (
      <></>
    )
  }

  const renderVulnerabilitiesAccordionItem = () => {
    if (!isLoading && securityReport) {
      return (
        <AccordionItem value="vulnerabilities">
          <AccordionTrigger><p className="font-mono">Vulnerabilities</p></AccordionTrigger>
          <AccordionContent>
            <div className="space-y-2 px-3">
              <VulnerabilitiesAccordion vulnerabilities={securityReport.vulnerabilities} />
            </div>
          </AccordionContent>
        </AccordionItem>
      )
  }
  return (
    <></>
  )
  }


  return (
    <Card className={cn("w-full", className)} {...props}>
      <CardHeader className="space-y-3 pb-0">
        <PageTitle 
          title="Security Report"
          isLoading={isLoading}
          loadingTitle="Security Report"
          headingElement={TypographyH3}
        />
        <CardDescription className="leading-5">Generated security report artifact furnished for GitLab.</CardDescription>
        <Separator />
      </CardHeader>
      <CardContent>
        <Accordion type="multiple" defaultValue={[
          "version",
          "scan",
          "vulnerabilities",
        ]}>
          {renderVersionAccordionItem()}
          {renderScanAccordionItem()}
          {renderVulnerabilitiesAccordionItem()}
        </Accordion>
      </CardContent>
    </Card>
  )
}

export { SecurityReportCard }
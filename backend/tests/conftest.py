import os
from typing import Generator
import pytest
import alembic
from alembic.config import Config
from fastapi import FastAPI
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session, sessionmaker

from app.database.db import engine
from app.database.dependency import get_db

from tests.factories.detection import JobFactory
from tests.factories.report import (
  VendorFactory,
  IdentifierFactory,
  CVSSVectorFactory,
  LinkFactory,
  LocationFactory,
  FlagFactory,
  ScanFactory
)

@pytest.fixture(scope="session")
def apply_migrations() -> Generator[None, None, None]:
  os.environ["TESTING"] = "1"

  from app.config.base import clear_settings_cache
  clear_settings_cache()

  config = Config("alembic.ini")
  alembic.command.upgrade(config, "head")
  yield
  alembic.command.downgrade(config, "base")

@pytest.fixture
def testing_db_session(apply_migrations: None) -> Generator[Session, None, None]:
  TestingSessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
  )
  session = TestingSessionLocal()
  yield session
  session.close()

@pytest.fixture(autouse=True)
def set_session_for_factories(testing_db_session: Generator[Session, None, None]) -> None:
  factories = [
    JobFactory,
    VendorFactory,
    IdentifierFactory,
    CVSSVectorFactory,
    LinkFactory,
    LocationFactory,
    FlagFactory,
    ScanFactory
  ]
  for factory in factories:
    factory._meta.sqlalchemy_session = testing_db_session

@pytest.fixture
def app() -> FastAPI:
  from app.main import get_application

  return get_application()

@pytest.fixture
def client(testing_db_session: Generator[Session, None, None], app: FastAPI) -> Generator[TestClient, None, None]:
  def override_get_db():
    try:
      yield testing_db_session
    finally:
      testing_db_session.close()
  
  app.dependency_overrides[get_db] = override_get_db
  client = TestClient(app)
  yield client

  app.dependency_overrides.clear()
  
  
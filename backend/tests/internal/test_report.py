import random
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
import pytest

from app.internal.report import (
  create_and_save
)
from app.database.schemas import report_base as base_schemas

from tests.factories.detection import JobFactory
from tests.factories import report as report_factories
from tests.factories.utils import generate_without_commit
from tests.utils.assertion import assert_attributes

@pytest.mark.asyncio
async def test_create_and_save(testing_db_session: Session):
  job = JobFactory()

  with generate_without_commit():
    vulnerabilities = [report_factories.VulnerabilityFactory() for _ in range(3)]
    remediations = [
      report_factories.RemediationFactory(fixes=[
        report_factories.VulnerabilityIdentifierFactory(id=vulnerability.id, vulnerability=vulnerability)
      ]) 
      for vulnerability in vulnerabilities
    ]
    attrs = {
      "success": random.choice([True, False]),
      "start_time": datetime.now(),
      "end_time": datetime.now() + timedelta(minutes=random.uniform(0, 10)),
      "analyzer_metadata": base_schemas.Analyzer.model_validate(report_factories.AnalyzerFactory()),
      "scanner_metadata": base_schemas.Analyzer.model_validate(report_factories.ScannerFactory()),
      "vulnerabilities": [base_schemas.Vulnerability.model_validate(v) for v in vulnerabilities],
      "remediations": [base_schemas.Remediation.model_validate(r) for r in remediations],
      "gl_job_id": job.gl_job_id
    }
  success, db_security_report = await create_and_save(
    db=testing_db_session,
    **attrs
  )
  assert success
  assert hasattr(db_security_report, "id")
  assert db_security_report.scan.start_time == attrs["start_time"].replace(microsecond=0)
  assert db_security_report.scan.end_time == attrs["end_time"].replace(microsecond=0)
  assert hasattr(db_security_report.scan.analyzer, "id")
  assert db_security_report.scan.analyzer.name == attrs["analyzer_metadata"].name
  assert db_security_report.scan.analyzer.version == attrs["analyzer_metadata"].version
  assert db_security_report.scan.analyzer.vendor.name == attrs["analyzer_metadata"].vendor.name
  assert db_security_report.scan.scanner.name == attrs["scanner_metadata"].name
  assert db_security_report.scan.scanner.version == attrs["scanner_metadata"].version
  assert db_security_report.scan.scanner.vendor.name == attrs["scanner_metadata"].vendor.name
  assert db_security_report.scan.status == "success" if attrs["success"] else "failure"
  assert len(db_security_report.vulnerabilities) > 0
  assert len(db_security_report.vulnerabilities) == len(attrs["vulnerabilities"])
  assert len(db_security_report.remediations) > 0
  assert len(db_security_report.remediations) == len(attrs["remediations"])
  assert db_security_report.job_id == job.id

# def test_create_vulnerability_schema():
#   ...

# def test_create_scanner_schema():
#   ...

# def test_create_analyzer_schema():
#   ...
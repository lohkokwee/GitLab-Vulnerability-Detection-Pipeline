from sqlalchemy.orm import Session
from faker import Faker

from app.database.crud.workers_status import (
  get_status_scan_job_by_db_job_id,
  create_status_scan_job,
  update_status_scan_job_by_db_job_id,
)
from app.database.schemas import workers_status as schemas

from tests.factories.detection import JobFactory
from tests.factories import workers_status as workers_factories
from tests.utils.assertion import assert_attributes

def test_get_status_scan_job_by_db_job_id(testing_db_session: Session) -> None:
  db_job = JobFactory()
  db_status_scan_job = workers_factories.StatusScanJobFactory(job=db_job)
  tally_status_scan_job = get_status_scan_job_by_db_job_id(db=testing_db_session, db_job_id=db_job.id)
  assert db_status_scan_job.id == tally_status_scan_job.id
  assert db_status_scan_job.db_get_job_task == tally_status_scan_job.db_get_job_task
  assert db_status_scan_job.gitlab_get_related_files_task == tally_status_scan_job.gitlab_get_related_files_task
  assert db_status_scan_job.scan_run_task == tally_status_scan_job.scan_run_task
  assert db_status_scan_job.db_create_and_save_task == tally_status_scan_job.db_create_and_save_task
  assert db_status_scan_job.gitlab_trigger_job_task == tally_status_scan_job.gitlab_trigger_job_task
  assert db_status_scan_job.overall_status == tally_status_scan_job.overall_status
  assert db_status_scan_job.remarks == tally_status_scan_job.remarks

def test_create_default_status_scan_job(testing_db_session: Session) -> None:
  db_job = JobFactory()
  status_scan_job_schema = schemas.StatusScanJobCreate(job_id=db_job.id)
  init_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
  assert hasattr(init_db_status_scan_job, "id")
  assert_attributes(db_object=init_db_status_scan_job, attrs=status_scan_job_schema.model_dump(), excl=["job"])
  assert init_db_status_scan_job.job == db_job

  duplicate_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
  assert duplicate_db_status_scan_job.id == init_db_status_scan_job.id

def test_create_status_scan_job_with_data(testing_db_session: Session) -> None:
  db_job = JobFactory()
  status_scan_job_schema = schemas.StatusScanJobCreate(
    job_id=db_job.id,
    db_get_job_task="success",
    gitlab_get_related_files_task="in_progress",
    overall_status="in_progress",
  )
  init_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
  assert hasattr(init_db_status_scan_job, "id")
  assert_attributes(db_object=init_db_status_scan_job, attrs=status_scan_job_schema.model_dump(), excl=["job"])
  assert init_db_status_scan_job.job == db_job

  duplicate_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
  assert duplicate_db_status_scan_job.id == init_db_status_scan_job.id

def test_update_status_scan_job_by_db_job_id(testing_db_session: Session) -> None:
  fake = Faker()
  db_job = JobFactory()
  attrs = {
    "db_get_job_task": "not_started",
    "gitlab_get_related_files_task": "in_progress",
    "scan_run_task": "not_started",
    "db_create_and_save_task": "not_started",
    "gitlab_trigger_job_task": "not_started",
    "overall_status": "in_progress",
    "remarks": fake.sentence(nb_words=10),
  }
  db_status_scan_job = workers_factories.StatusScanJobFactory(job=db_job)
  updated_status_scan_job_schema = schemas.StatusScanJobUpdate(
    gitlab_get_related_files_task=attrs["gitlab_get_related_files_task"],
    overall_status=attrs["overall_status"],
    remarks=attrs["remarks"]
  )
  updated_db_status_scan_job = update_status_scan_job_by_db_job_id(db=testing_db_session, status_scan_job=updated_status_scan_job_schema, db_job_id=db_job.id)

  assert updated_db_status_scan_job.id == db_status_scan_job.id
  assert updated_db_status_scan_job.job_id == db_job.id
  assert_attributes(db_object=updated_db_status_scan_job, attrs=attrs)

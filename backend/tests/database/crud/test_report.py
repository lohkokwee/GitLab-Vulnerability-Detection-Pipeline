import random
from sqlalchemy.orm import Session

from app.database.models import report as models
from app.database.crud.report import get_report_by_gl_job_id, create_security_report

from tests.factories.detection import JobFactory
from tests.factories import report as report_factories

def test_get_report_by_gl_job_id(testing_db_session: Session) -> None:
  job = JobFactory()
  db_security_report = report_factories.SecurityReportFactory(job=job)
  assert hasattr(db_security_report, "id")
  
  tally_security_report = get_report_by_gl_job_id(db=testing_db_session, gl_job_id=job.gl_job_id)
  assert tally_security_report.job_id == job.id
  assert db_security_report.job == tally_security_report.job
  assert db_security_report.scan == tally_security_report.scan
  for db_v, tally_v in zip(db_security_report.vulnerabilities, tally_security_report.vulnerabilities):
    assert db_v == tally_v
  for db_r, tally_r in zip(db_security_report.remediations, tally_security_report.remediations):
    assert db_r == tally_r
  
def test_create_security_report(testing_db_session: Session) -> None:
  job = JobFactory()
  scan = report_factories.ScanFactory(dependencies_furnished=True)
  vulnerabilities = [report_factories.VulnerabilityFactory() for _ in range(random.randint(0, 4))]
  remediations = [
    report_factories.RemediationFactory(fixes=[
      report_factories.VulnerabilityIdentifierFactory(vulnerability=vulnerability)
    ]) 
    for vulnerability in vulnerabilities
  ]
  saved_security_report = create_security_report(
    db=testing_db_session,
    scan=scan,
    vulnerabilities=vulnerabilities,
    remediations=remediations,
    gl_job_id=job.gl_job_id
  )
  db_security_report = testing_db_session.query(models.SecurityReport).filter(models.SecurityReport.id == saved_security_report.id).one_or_none()
  assert db_security_report is not None
  assert db_security_report.version == "15.0.7"
  assert db_security_report.report_schema == "https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json"

  db_scan = db_security_report.scan
  assert db_scan is not None
  assert db_scan.id != scan.id
  assert db_scan.start_time == scan.start_time
  assert db_scan.end_time == scan.end_time
  assert db_scan.status == scan.status
  assert db_scan.type == scan.type

  assert db_scan.analyzer.id == scan.analyzer.id
  assert db_scan.analyzer.name == scan.analyzer.name
  assert db_scan.analyzer.version == scan.analyzer.version
  assert db_scan.analyzer.vendor.name == scan.analyzer.vendor.name
  
  assert db_scan.scanner.id == scan.scanner.id
  assert db_scan.scanner.name == scan.scanner.name
  assert db_scan.scanner.version == scan.scanner.version
  assert db_scan.scanner.vendor.name == scan.scanner.vendor.name

  vulnerabilities.sort(key=lambda v: v.id)
  db_vulnerabilities = sorted(db_security_report.vulnerabilities, key=lambda v: v.id)
  
  remediations.sort(key=lambda r: r.id)
  db_remediations = sorted(db_security_report.remediations, key=lambda r: r.id)

  for v, db_v in zip(vulnerabilities, db_security_report.vulnerabilities):
    assert db_v.name == v.name
    assert db_v.description == v.description
    assert db_v.severity == v.severity
    assert db_v.solution == v.solution
    assert db_v.raw_source_code_extract == v.raw_source_code_extract

    for id, db_id in zip(v.identifiers, db_v.identifiers):
      assert db_id.type == id.type
      assert db_id.name == id.name
      assert db_id.value == id.value
      assert db_id.url == id.url

    for l, db_l in zip(v.links, db_v.links):
      assert db_l.url == l.url
      assert db_l.name == l.name

    db_loc = db_v.location
    assert db_loc.file == v.location.file
    assert db_loc.start_line == v.location.start_line
    assert db_loc.end_line == v.location.end_line
    assert db_loc.class_name == v.location.class_name
    assert db_loc.method_name == v.location.method_name

    for f, db_f in zip(v.flags, db_v.flags):
      assert db_f.type == f.type
      assert db_f.origin == f.origin
      assert db_f.description == f.description

    for c, db_c in zip(v.cvss_vectors, db_v.cvss_vectors):
      assert db_c.vector == c.vector
      assert db_c.vendor.name == c.vendor.name

  for r, db_r in zip(remediations, db_security_report.remediations):
    assert db_r.summary == r.summary
    assert db_r.diff == r.diff
    for fix, db_fix in zip(r.fixes, db_r.fixes):
      assert db_fix.vulnerability.id == fix.vulnerability.id

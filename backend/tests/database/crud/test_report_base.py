import random
import uuid
from sqlalchemy.orm import Session
from faker import Faker

from app.database.crud.report_base import (
  create_db_communication,
  create_db_configuration_option,
  get_or_create_db_identifier,
  get_or_create_db_vendor,
  get_or_create_db_cvss_vector,
  get_or_create_db_link,
  create_db_location,
  create_db_flag,
  create_db_vulnerability
)
from app.database.schemas import report as schema

from tests.factories.report import (
  VendorFactory,
  IdentifierFactory,
  CVSSVectorFactory,
  LinkFactory,
  LocationFactory,
  FlagFactory,
  ScanFactory
)

def test_create_db_communication(testing_db_session: Session) -> None:
  fake = Faker()
  level = random.choice(schema.CommunicationLevels.__args__)
  value = fake.sentence(nb_words=10)
  scan = ScanFactory()

  db_communication = create_db_communication(
    db=testing_db_session,
    level=level,
    value=value,
    scan=scan
  )
  assert hasattr(db_communication, "id")
  attrs = [
    "level",
    "value",
    "scan"
  ]
  for attr in attrs:
    assert getattr(db_communication, attr) == eval(attr)
  assert scan.messages[0].id == db_communication.id

def test_create_db_configuration_option(testing_db_session: Session) -> None:
  fake = Faker()
  name = fake.name()
  value = f"{fake.boolean}"
  source = random.choice(schema.ConfigSources.__args__)
  scan = ScanFactory()

  db_configuration_option = create_db_configuration_option(
    db=testing_db_session,
    name=name,
    value=value,
    source=source,
    scan=scan
  )
  assert hasattr(db_configuration_option, "id")
  attrs = [
    "name",
    "value",
    "source",
    "scan"
  ]
  for attr in attrs:
    assert getattr(db_configuration_option, attr) == eval(attr)
  assert scan.options[0].id == db_configuration_option.id

def test_get_or_create_db_identifier(testing_db_session: Session) -> None:
  fake = Faker()
  type = fake.name()
  name = fake.name()
  value = f"{fake.random_number(digits=3)}"
  url = fake.url()
  init_db_identifier = get_or_create_db_identifier(
    db=testing_db_session,
    type=type,
    name=name,
    value=value,
    url=url
  )
  assert hasattr(init_db_identifier, "id")
  attrs = [
    "type",
    "name",
    "value",
    "url"
  ]
  for attr in attrs:
    assert getattr(init_db_identifier, attr) == eval(attr)

  duplicate_db_identifier = get_or_create_db_identifier(
    db=testing_db_session,
    type=type,
    name=name,
    value=value,
    url=url
  )
  assert duplicate_db_identifier.id == init_db_identifier.id

def test_get_or_create_db_vendor(testing_db_session: Session) -> None:
  fake = Faker()
  name = fake.name()
  init_db_vendor = get_or_create_db_vendor(
    db=testing_db_session,
    name=name
  )
  assert hasattr(init_db_vendor, "id")
  attrs = [
    "name",
  ]
  for attr in attrs:
    assert getattr(init_db_vendor, attr) == eval(attr)

  duplicate_db_vendor = get_or_create_db_vendor(
    db=testing_db_session,
    name=name
  )
  assert duplicate_db_vendor.id == init_db_vendor.id

def test_get_or_create_db_cvss_vector(testing_db_session: Session) -> None:
  fake = Faker()
  vector = fake.name()
  vendor = VendorFactory()
  init_db_cvss_vector = get_or_create_db_cvss_vector(
    db=testing_db_session,
    vector=vector,
    vendor=vendor
  )
  assert hasattr(init_db_cvss_vector, "id")
  attrs = [
    "vector",
    "vendor"
  ]
  for attr in attrs:
    assert getattr(init_db_cvss_vector, attr) == eval(attr)

  duplicate_db_cvss_vector = get_or_create_db_cvss_vector(
    db=testing_db_session,
    vector=vector,
    vendor=vendor
  )
  assert duplicate_db_cvss_vector.id == init_db_cvss_vector.id

def test_get_or_create_db_link(testing_db_session: Session) -> None:
  fake = Faker()
  url = fake.url()
  name = fake.name()
  init_db_link = get_or_create_db_link(
    db=testing_db_session,
    url=url,
    name=name
  )
  assert hasattr(init_db_link, "id")
  attrs = [
    "url",
    "name"
  ]
  for attr in attrs:
    assert getattr(init_db_link, attr) == eval(attr)

  duplicate_db_link = get_or_create_db_link(
    db=testing_db_session,
    url=url,
    name=name
  )
  assert duplicate_db_link.id == init_db_link.id

def test_create_db_location(testing_db_session: Session) -> None:
  fake = Faker()
  file = fake.file_name()
  start_line = random.randint(1, 5)
  end_line = random.randint(5, 10)
  class_name = fake.first_name()
  method_name = fake.last_name()
  db_location = create_db_location(
    db=testing_db_session,
    file=file,
    start_line=start_line,
    end_line=end_line,
    class_name=class_name,
    method_name=method_name,
  )
  assert hasattr(db_location, "id")
  attrs = [
    "file",
    "start_line",
    "end_line",
    "class_name",
    "method_name"
  ]
  for attr in attrs:
    assert getattr(db_location, attr) == eval(attr)

def test_create_db_flag(testing_db_session: Session) -> None:
  fake = Faker()
  type = random.choice(schema.FlagTypes.__args__)
  origin = fake.name()
  description = fake.sentence(nb_words=10)
  db_flag = create_db_flag(
    db=testing_db_session,
    type=type,
    origin=origin,
    description=description
  )
  assert hasattr(db_flag, "id")
  attrs = [
    "type",
    "origin",
    "description"
  ]
  for attr in attrs:
    assert getattr(db_flag, attr) == eval(attr)

def test_create_db_vulnerability(testing_db_session: Session) -> None:
  fake = Faker()
  id = uuid.uuid4()
  identifiers = [
    IdentifierFactory(),
    IdentifierFactory()
  ]
  location = LocationFactory()
  name = fake.name()
  description = fake.sentence(nb_words=10)
  severity = random.choice(schema.SeverityLevels.__args__)
  solution = fake.sentence(nb_words=10)
  cvss_vectors = [
    CVSSVectorFactory(),
    CVSSVectorFactory()
  ]
  links = [
    LinkFactory(),
    LinkFactory()
  ]
  flags = [
    FlagFactory(),
    FlagFactory()
  ]
  raw_source_code_extract = fake.sentence()
  db_vulnerability = create_db_vulnerability(
    db=testing_db_session,
    id=id,
    identifiers=identifiers,
    location=location,
    name=name,
    description=description,
    severity=severity,
    solution=solution,
    cvss_vectors=cvss_vectors,
    links=links,
    flags=flags,
    raw_source_code_extract=raw_source_code_extract
  )
  attrs = [
    "id",
    "location",
    "name",
    "description",
    "severity",
    "solution",
    "raw_source_code_extract",
  ]
  for attr in attrs:
    assert getattr(db_vulnerability, attr) == eval(attr)

  list_attrs = [
    "identifiers",
    "cvss_vectors",
    "links",
    "flags"
  ]
  for attr in list_attrs:
    attr_values = getattr(db_vulnerability, attr)
    tally_values = eval(attr)
    for i in range(len(attr_values)):
      assert attr_values[i] in tally_values
import random
from uuid import uuid4
from sqlalchemy.orm import Session
from faker import Faker
from datetime import datetime, timedelta

from app.database.crud.report_base import (
  create_db_communication,
  create_db_configuration_option,
  get_or_create_db_identifier,
  get_or_create_db_vendor,
  get_or_create_db_cvss_vector,
  get_or_create_db_link,
  create_db_location,
  create_db_flag,
  create_db_vulnerability,
  get_or_create_db_analyzer,
  get_or_create_db_scanner,
  create_db_scan,
  create_db_remediation,
  create_db_security_report
)
from app.database.schemas import report_base as schemas

from tests.factories.detection import JobFactory
from tests.factories import report as report_factories

def test_create_db_communication(testing_db_session: Session) -> None:
  fake = Faker()
  level = random.choice(schemas.CommunicationLevels.__args__)
  value = fake.sentence(nb_words=10)
  scan = report_factories.ScanFactory()

  db_communication = create_db_communication(
    db=testing_db_session,
    level=level,
    value=value,
    scan=scan
  )
  assert hasattr(db_communication, "id")
  attrs = [
    "level",
    "value",
    "scan"
  ]
  for attr in attrs:
    assert getattr(db_communication, attr) == eval(attr)
  assert scan.messages[0].id == db_communication.id

def test_create_db_configuration_option(testing_db_session: Session) -> None:
  fake = Faker()
  name = fake.name()
  value = f"{random.uniform(0, 1)}"
  source = random.choice(schemas.ConfigSources.__args__)
  scan = report_factories.ScanFactory()

  db_configuration_option = create_db_configuration_option(
    db=testing_db_session,
    name=name,
    value=value,
    source=source,
    scan=scan
  )
  assert hasattr(db_configuration_option, "id")
  attrs = [
    "name",
    "value",
    "source",
    "scan"
  ]
  for attr in attrs:
    assert getattr(db_configuration_option, attr) == eval(attr)
  assert scan.options[0].id == db_configuration_option.id

def test_get_or_create_db_identifier(testing_db_session: Session) -> None:
  fake = Faker()
  type = fake.name()
  name = fake.name()
  value = f"{fake.random_number(digits=3)}"
  url = fake.url()
  init_db_identifier = get_or_create_db_identifier(
    db=testing_db_session,
    type=type,
    name=name,
    value=value,
    url=url
  )
  assert hasattr(init_db_identifier, "id")
  attrs = [
    "type",
    "name",
    "value",
    "url"
  ]
  for attr in attrs:
    assert getattr(init_db_identifier, attr) == eval(attr)

  duplicate_db_identifier = get_or_create_db_identifier(
    db=testing_db_session,
    type=type,
    name=name,
    value=value,
    url=url
  )
  assert duplicate_db_identifier.id == init_db_identifier.id

def test_get_or_create_db_vendor(testing_db_session: Session) -> None:
  fake = Faker()
  name = fake.name()
  init_db_vendor = get_or_create_db_vendor(
    db=testing_db_session,
    name=name
  )
  assert hasattr(init_db_vendor, "id")
  attrs = [
    "name",
  ]
  for attr in attrs:
    assert getattr(init_db_vendor, attr) == eval(attr)

  duplicate_db_vendor = get_or_create_db_vendor(
    db=testing_db_session,
    name=name
  )
  assert duplicate_db_vendor.id == init_db_vendor.id

def test_get_or_create_db_cvss_vector(testing_db_session: Session) -> None:
  fake = Faker()
  vector = fake.name()
  vendor = report_factories.VendorFactory()
  init_db_cvss_vector = get_or_create_db_cvss_vector(
    db=testing_db_session,
    vector=vector,
    vendor=vendor
  )
  assert hasattr(init_db_cvss_vector, "id")
  attrs = [
    "vector",
    "vendor"
  ]
  for attr in attrs:
    assert getattr(init_db_cvss_vector, attr) == eval(attr)

  duplicate_db_cvss_vector = get_or_create_db_cvss_vector(
    db=testing_db_session,
    vector=vector,
    vendor=vendor
  )
  assert duplicate_db_cvss_vector.id == init_db_cvss_vector.id

def test_get_or_create_db_link(testing_db_session: Session) -> None:
  fake = Faker()
  url = fake.url()
  name = fake.name()
  init_db_link = get_or_create_db_link(
    db=testing_db_session,
    url=url,
    name=name
  )
  assert hasattr(init_db_link, "id")
  attrs = [
    "url",
    "name"
  ]
  for attr in attrs:
    assert getattr(init_db_link, attr) == eval(attr)

  duplicate_db_link = get_or_create_db_link(
    db=testing_db_session,
    url=url,
    name=name
  )
  assert duplicate_db_link.id == init_db_link.id

def test_create_db_location(testing_db_session: Session) -> None:
  fake = Faker()
  file = fake.file_name()
  start_line = random.randint(1, 5)
  end_line = random.randint(5, 10)
  class_name = fake.first_name()
  method_name = fake.last_name()
  db_location = create_db_location(
    db=testing_db_session,
    file=file,
    start_line=start_line,
    end_line=end_line,
    class_name=class_name,
    method_name=method_name,
  )
  assert hasattr(db_location, "id")
  attrs = [
    "file",
    "start_line",
    "end_line",
    "class_name",
    "method_name"
  ]
  for attr in attrs:
    assert getattr(db_location, attr) == eval(attr)

def test_create_db_flag(testing_db_session: Session) -> None:
  fake = Faker()
  type = random.choice(schemas.FlagTypes.__args__)
  origin = fake.name()
  description = fake.sentence(nb_words=10)
  db_flag = create_db_flag(
    db=testing_db_session,
    type=type,
    origin=origin,
    description=description
  )
  assert hasattr(db_flag, "id")
  attrs = [
    "type",
    "origin",
    "description"
  ]
  for attr in attrs:
    assert getattr(db_flag, attr) == eval(attr)

def test_create_db_vulnerability(testing_db_session: Session) -> None:
  fake = Faker()
  id = uuid4()
  identifiers = [report_factories.IdentifierFactory() for _ in range(3)]
  location = report_factories.LocationFactory()
  name = fake.name()
  description = fake.sentence(nb_words=10)
  severity = random.choice(schemas.SeverityLevels.__args__)
  solution = fake.sentence(nb_words=10)
  cvss_vectors = [report_factories.CVSSVectorFactory() for _ in range(3)]
  links = [report_factories.LinkFactory() for _ in range (3)]
  flags = [report_factories.FlagFactory() for _ in range (3)]
  raw_source_code_extract = fake.sentence()
  db_vulnerability = create_db_vulnerability(
    db=testing_db_session,
    id=id,
    identifiers=identifiers,
    location=location,
    name=name,
    description=description,
    severity=severity,
    solution=solution,
    cvss_vectors=cvss_vectors,
    links=links,
    flags=flags,
    raw_source_code_extract=raw_source_code_extract
  )
  assert hasattr(db_vulnerability, "vulnerability_identifier")
  attrs = [
    "id",
    "location",
    "name",
    "description",
    "severity",
    "solution",
    "raw_source_code_extract",
    "identifiers",
    "cvss_vectors",
    "links",
    "flags"
  ]
  for attr in attrs:
    db_value = getattr(db_vulnerability, attr)
    tally_value = eval(attr)

    if isinstance(db_value, list):
      for i in range(len(db_value)):
        assert db_value[i] in tally_value
    else:
      assert db_value == tally_value
  
def test_get_or_create_db_analyzer(testing_db_session: Session) -> None:
  fake = Faker()
  id = uuid4()
  name = fake.name()
  version = f"{random.uniform(0, 10)}"
  vendor = report_factories.VendorFactory()
  url = fake.url()
  init_db_analyzer = get_or_create_db_analyzer(
    db=testing_db_session,
    id=id,
    name=name,
    version=version,
    vendor=vendor,
    url=url
  )
  attrs = [
    "id",
    "name",
    "version",
    "vendor",
    "url"
  ]
  for attr in attrs:
    assert getattr(init_db_analyzer, attr) == eval(attr)

  duplicate_db_analyzer = get_or_create_db_analyzer(
    db=testing_db_session,
    id=id,
    name=name,
    version=version,
    vendor=vendor,
    url=url
  )
  assert duplicate_db_analyzer.id == init_db_analyzer.id

def test_get_or_create_db_scanner(testing_db_session: Session) -> None:
  fake = Faker()
  id = uuid4()
  name = fake.name()
  version = f"{random.uniform(0, 10)}"
  vendor = report_factories.VendorFactory()
  url = fake.url()
  init_db_scanner = get_or_create_db_scanner(
    db=testing_db_session,
    id=id,
    name=name,
    version=version,
    vendor=vendor,
    url=url
  )
  attrs = [
    "id",
    "name",
    "version",
    "vendor",
    "url"
  ]
  for attr in attrs:
    assert getattr(init_db_scanner, attr) == eval(attr)

  duplicate_db_scanner = get_or_create_db_scanner(
    db=testing_db_session,
    id=id,
    name=name,
    version=version,
    vendor=vendor,
    url=url
  )
  assert duplicate_db_scanner.id == init_db_scanner.id

def test_create_db_scan(testing_db_session: Session) -> None:
  fake = Faker()
  analyzer = report_factories.AnalyzerFactory()
  start_time = datetime.now()
  end_time = datetime.now() + timedelta(minutes=random.uniform(0, 10))
  scanner = report_factories.ScannerFactory()
  status = random.choice(schemas.ScanStatuses.__args__)
  type = random.choice(schemas.ScanTypes.__args__)
  db_scan = create_db_scan(
    db=testing_db_session,
    analyzer=analyzer,
    start_time=start_time,
    end_time=end_time,
    scanner=scanner,
    status=status,
    type=type
  )
  assert hasattr(db_scan, "id")
  attrs = [
    "analyzer",
    "start_time",
    "end_time",
    "scanner",
    "status",
    "type"
  ]
  for attr in attrs:
    assert getattr(db_scan, attr) == eval(attr)

def test_create_db_remediation(testing_db_session: Session) -> None:
  fake = Faker()
  summary = fake.sentence(nb_words=10)
  diff = fake.sentence()
  fixes = [
    report_factories.VulnerabilityIdentifierFactory(vulnerability=report_factories.VulnerabilityFactory())
    for _ in range(3)
  ]
  db_remediation = create_db_remediation(
    db=testing_db_session,
    summary=summary,
    diff=diff,
    fixes=fixes
  )
  assert hasattr(db_remediation, "id")
  attrs = [
    "summary",
    "diff",
    "fixes"
  ]
  for attr in attrs:
    db_value = getattr(db_remediation, attr)
    tally_value = eval(attr)

    if isinstance(db_value, list):
      for i in range(len(db_value)):
        assert db_value[i] in tally_value
    else:
      assert db_value == tally_value

def test_create_db_security_report(testing_db_session: Session) -> None:
  job = JobFactory()
  scan = report_factories.ScanFactory()
  vulnerabilities = [report_factories.VulnerabilityFactory() for _ in range(3)]
  remediations = [
    report_factories.RemediationFactory(fixes=[
      report_factories.VulnerabilityIdentifierFactory(vulnerability=vulnerability)
    ]) 
    for vulnerability in vulnerabilities
  ]
  db_security_report = create_db_security_report(
    db=testing_db_session,
    scan=scan,
    vulnerabilities=vulnerabilities,
    remediations=remediations,
    gl_job_id=job.gl_job_id
  )
  assert hasattr(db_security_report, "id")
  assert db_security_report.job_id == job.id
  assert db_security_report.version == "15.0.7"
  assert db_security_report.report_schema == "https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json"
  
  attrs = [
    "scan",
    "vulnerabilities",
    "remediations"
  ]
  for attr in attrs:
    db_value = getattr(db_security_report, attr)
    tally_value = eval(attr)

    if isinstance(db_value, list):
      for i in range(len(db_value)):
        assert db_value[i] in tally_value
    else:
      assert db_value == tally_value
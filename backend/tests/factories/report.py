import random
from datetime import datetime, timedelta
from factory import SubFactory, lazy_attribute, LazyFunction
from factory.alchemy import SQLAlchemyModelFactory
from factory.faker import Faker

from app.database.models import report as models
from app.database.schemas import report as schemas

class VendorFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.Vendor
    sqlalchemy_session_persistence = "commit"
  
  name = Faker("name")

class IdentifierFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.Identifier
    sqlalchemy_session_persistence = "commit"
  
  type = Faker("name")
  name = Faker("name")
  value = Faker("random_number", digits=3)
  url = Faker("url")

class CVSSVectorFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.CVSSVector
    sqlalchemy_session_persistence = "commit"
  
  vector = Faker("name")
  vendor = SubFactory(VendorFactory)

class LinkFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.Link
    sqlalchemy_session_persistence = "commit"
  
  url = Faker("url")
  name = Faker("name")

class LocationFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.Location
    sqlalchemy_session_persistence = "commit"

  file = Faker("file_name")
  class_name = Faker("first_name")
  method_name = Faker("last_name")
  
  @lazy_attribute
  def start_line(self):
    return random.randint(1, 5)
  
  @lazy_attribute
  def end_line(self):
    return random.randint(5, 10)
  
class FlagFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.Flag
    sqlalchemy_session_persistence = "commit"

  type = random.choice(schemas.FlagTypes.__args__)
  origin = Faker("name")
  description = Faker("sentence", nb_words=10)

class ScanFactory(SQLAlchemyModelFactory):
  class Meta:
    model = models.Scan
    sqlalchemy_session_persistence = "commit"

  start_time = LazyFunction(datetime.now)
  status = "success"
  type = "sast"

  @lazy_attribute
  def end_time(self):
    return self.start_time + timedelta(minutes=1)
  
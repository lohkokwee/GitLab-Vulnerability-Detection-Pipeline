import pytest
from unittest.mock import patch
import asyncio
from aioresponses import aioresponses
from sqlalchemy.orm import Session
from faker import Faker
from urllib.parse import quote

from app.config.app import settings
from app.database.models.detection import Job
from app.database.schemas.gitlab import FileContent
from app.internal.gitlab import STAGES
from app.workers import scan_job

from tests.factories.detection import JobFactory

@pytest.mark.asyncio
async def test_start_success(mock_aioresponse: aioresponses, testing_db_session: Session, TestingSessionLocal: Session):
  fake = Faker()
  job = JobFactory()
  headers = {"Authorization": f'Bearer {settings.GITLAB_ACCESS_TOKEN}'}

  files: list[FileContent] = [
    FileContent(path=file_path, content=fake.sentence(nb_words=10).encode('utf-8')) for file_path in job.diff
  ]
  for data in files:
    encoded_file_path = quote(data.path, safe='')
    get_files_url = f"{settings.GITLAB_BASE_API_URL}/{job.gl_project_id}/repository/files/{encoded_file_path}/raw?ref={job.gl_commit_sha}"
    mock_aioresponse.get(
      get_files_url,
      headers=headers,
      status=200,
      body=data.content
    )

  new_job_id = fake.random_int()
  retrieve_job_url = f"{settings.GITLAB_BASE_API_URL}/{job.gl_project_id}/pipelines/{job.gl_pipeline_id}/jobs"
  mock_aioresponse.get(
    retrieve_job_url, 
    headers=headers,
    status=200,
    payload=[
      {"name": STAGES.VULNERABILITY_SCAN, "id": fake.random_int()},
      {"name": STAGES.REPORT_RETRIEVAL, "id": new_job_id},
    ]
  )

  artifact_retrieval_url = f"{settings.GITLAB_BASE_API_URL}/{job.gl_project_id}/jobs/{new_job_id}/play"
  mock_aioresponse.post(artifact_retrieval_url, headers=headers, status=200)

  with patch('asyncio.sleep', return_value=asyncio.Future()) as mock_sleep:
    success = await scan_job.start(db_job_id=job.id, session=TestingSessionLocal)
  db_job = testing_db_session.query(Job).filter(Job.id == job.id).one_or_none()
  
  assert success
  assert hasattr(db_job, "security_report")
  assert db_job.security_report is not None

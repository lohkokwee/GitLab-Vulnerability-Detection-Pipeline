from typing import Optional
from fastapi import APIRouter, Depends, HTTPException, Request
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from starlette.status import (
  HTTP_200_OK,
  HTTP_400_BAD_REQUEST,
  HTTP_404_NOT_FOUND,
)

from app.routers import routes
from app.database.dependency import get_db
from app.database.crud import report as crud
from app.database.crud.workers_status import update_status_scan_job_by_db_job_id
from app.database.schemas import report_base as base_schemas
from app.database.schemas import report_full as full_schemas
from app.database.schemas.workers_status import StatusScanJobUpdate as StatusUpdate

router = APIRouter(
  prefix=routes.REPORT_API_PREFIX,
  tags=["Report"],
  responses={
    HTTP_404_NOT_FOUND: {"detail": "Not found"}
  },
)

@router.get(routes.RETRIEVE_GL_REPORT_ARTIFACT_JOB, response_model=base_schemas.SecurityReport, response_model_exclude_none=True, status_code=HTTP_200_OK)
@router.get(routes.GET_GL_REPORT_BY_QUERY_ID, response_model=base_schemas.SecurityReport, response_model_exclude_none=True, status_code=HTTP_200_OK)
async def get_gl_report_by_query_id(request: Request, gl_job_id: Optional[str] = None, db_job_id: Optional[int] = None, db: Session = Depends(get_db)):
  """Provides a GitLab conformant report artifact for consumption on the GitLab severs.
  """
  if gl_job_id is None and db_job_id is None:
    raise HTTPException(status_code=HTTP_400_BAD_REQUEST, detail=f"Please provide either a GitLab job id or a database job id")
  db_report = crud.get_gl_report_by_query_id(db=db, gl_job_id=gl_job_id, db_job_id=db_job_id)
  if db_report is None:
    if gl_job_id is None:
      raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail=f"Security report with job id {db_job_id} not found")
    raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail=f"Security report with GitLab job id {gl_job_id} not found")
  
  if routes.RETRIEVE_GL_REPORT_ARTIFACT_JOB in request.url.path:
    update_status_scan_job_by_db_job_id(
      db=db,
      status_scan_job=StatusUpdate(
        gitlab_retrieve_artifact_task="success",
        overall_status="success",
      ),
      db_job_id=db_job_id,
      gl_job_id=gl_job_id,
    )

  return db_report

@router.get(routes.GET_FULL_REPORT_BY_QUERY_ID, response_model=full_schemas.SecurityReport, response_model_exclude_none=True, status_code=HTTP_200_OK)
async def get_full_report_by_query_id(gl_job_id: Optional[str] = None, db_job_id: Optional[int] = None, db: Session = Depends(get_db)):
  """Provides the full report data that we capture on our servers and all its respective associations.
  """
  if gl_job_id is None and db_job_id is None:
    raise HTTPException(status_code=HTTP_400_BAD_REQUEST, detail=f"Please provide either a GitLab job id or a database job id")
  db_report = crud.get_full_report_by_query_id(db=db, gl_job_id=gl_job_id, db_job_id=db_job_id)
  if db_report is None:
    if gl_job_id is None:
      raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail=f"Security report with job id {db_job_id} not found")
    raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail=f"Security report with GitLab job id {gl_job_id} not found")
  return db_report

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from starlette.status import HTTP_200_OK, HTTP_202_ACCEPTED

from app.database.crud import detection as crud
from app.database.models import detection as models
from app.database.schemas import detection as schemas
from app.database.dependency import get_db

router = APIRouter(
  prefix="/detection",
  tags=["Detection"],
  responses={
    404: {"detail": "Not found"}
  },
)

@router.post("/start", response_model=schemas.Job, status_code=HTTP_202_ACCEPTED)
async def start(job: schemas.JobCreate, db: Session = Depends(get_db)):
  db_job = crud.get_job_by_gl_job_id(db=db, gl_job_id=job.gl_job_id)
  if db_job:
    raise HTTPException(status_code=400, detail=f"GitLab job id {job.gl_job_id} already exists")
  db_job = crud.create_job(db=db, job=job)
  # TODO: start background task here
  return db_job

@router.get("/get_by_gl_job_id/{gl_job_id}", response_model=schemas.Job, status_code=HTTP_200_OK)
async def get_job(gl_job_id: str, db: Session = Depends(get_db)):
  db_job = crud.get_job_by_gl_job_id(db=db, gl_job_id=gl_job_id)
  if db_job is None:
    raise HTTPException(status_code=404, detail=f"Job with GitLab job id {gl_job_id} not found")
  return db_job

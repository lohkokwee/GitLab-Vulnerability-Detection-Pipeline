from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from app.responses.std import Message
from app.database.crud import detection as crud
from app.database.models import detection as models
from app.database.schemas import detection as schemas
from app.database.dependency import get_db

router = APIRouter(
  responses={
    404: {"detail": "Not found"}
  }
)

@router.post("/start", response_model=schemas.Job)
async def start(job: schemas.JobCreate, db: Session = Depends(get_db)):
  db_job = crud.get_job_by_gl_job_id(db=db, gl_job_id=job.gl_job_id)
  if db_job:
    raise HTTPException(status_code=400, detail=f"GitLab job id {job.gl_job_id} already exists")
  return crud.create_job(db=db, job=job)

@router.get("/get_by_gl_job_id/{gl_job_id}")
async def get_job(gl_job_id: str, db: Session = Depends(get_db)):
  db_job = crud.get_job_by_gl_job_id(db=db, gl_job_id=gl_job_id)
  if db_job is None:
    raise HTTPException(status_code=404, detail=f"Job with GitLab job id {gl_job_id} not found")
  return db_job

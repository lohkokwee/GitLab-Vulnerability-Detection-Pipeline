from typing import Optional
from uuid import uuid4
from sqlalchemy.orm import Session

from app.database.models import workers as models
from app.database.schemas import workers as schemas
from app.database.crud.base import get_or_create

def get_status_scan_job_by_db_job_id(db: Session, db_job_id: int) -> Optional[schemas.StatusScanJob]:
  return db.query(models.StatusScanJob).filter(models.StatusScanJob.job_id == db_job_id).one_or_none()

def create_status_scan_job(db: Session, status_scan_job: schemas.StatusScanJobCreate) -> schemas.StatusScanJob:
  db_status_scan_job = get_or_create(db=db, model=models.StatusScanJob, job_id=status_scan_job.job_id)
  return db_status_scan_job

def update_status_scan_job_by_db_job_id(db: Session, status_scan_job: schemas.StatusScanJob, db_job_id: int) -> Optional[schemas.StatusScanJob]:
  db_status_scan_job = db.query(models.StatusScanJob).filter(models.StatusScanJob.job_id == db_job_id).one_or_none()
  if db_status_scan_job is None:
    return None
  for attr, value in status_scan_job.model_dump(exclude_unset=True).items():
    setattr(db_status_scan_job, attr, value)
  db.commit()
  db.refresh(db_status_scan_job)
  return db_status_scan_job

from uuid import uuid4
from sqlalchemy.orm import Session

from app.database.models import report as models
from app.database.schemas import report_base as base_schemas
from app.database.schemas import report_full as full_schemas
from app.database.crud import report_base as base

from app.internal import report # TODO: remove when done

def get_report_by_gl_job_id(db: Session, gl_job_id: int) -> base_schemas.SecurityReport:
  # TODO: return actual SecurityReport when CRUD completed
  # return db.query(models.SecurityReport).filter(models.SecurityReport.gl_job_id == gl_job_id).first()
  return report.mock()

def create_security_report(
  db: Session,
  scan: base_schemas.Scan,
  vulnerabilities: list[base_schemas.Vulnerability],
  remediations: list[base_schemas.Remediation],
  gl_job_id: str
) -> full_schemas.SecurityReport:
  db_vulnerabilities = []
  db_remediations = []

  for vulnerability in vulnerabilities:
    identifiers = [
      base.get_or_create_db_identifier(
        db=db,
        type=identifier.type,
        name=identifier.name,
        value=identifier.value,
        url=identifier.url
      )
      for identifier in vulnerability.identifiers
    ]
    location = base.create_db_location(
      db=db,
      file=vulnerability.location.file,
      start_line=vulnerability.location.start_line,
      end_line=vulnerability.location.end_line,
      class_name=vulnerability.location.class_name,
      method_name=vulnerability.location.method_name
    )
    cvss_vectors = [
      base.get_or_create_db_cvss_vector(
        db=db,
        vector=cvss_vector.vector,
        vendor=base.get_or_create_db_vendor(db=db, name=cvss_vector.vendor.name),
      )
      for cvss_vector in vulnerability.cvss_vectors
    ]
    links = [
      base.get_or_create_db_link(db=db, url=link.url, name=link.name)
      for link in vulnerability.links
    ]
    flags = [
      base.create_db_flag(db=db, type=flag.type, origin=flag.origin, description=flag.description)
      for flag in vulnerability.flags
    ]
    db_vulnerabilities.append(
      base.create_db_vulnerability(
        db=db,
        id=uuid4(),
        identifiers=identifiers,
        location=location,
        name=vulnerability.name,
        description=vulnerability.description,
        severity=vulnerability.severity,
        solution=vulnerability.solution,
        cvss_vectors=cvss_vectors,
        links=links,
        flags=flags,
        raw_source_code_extract=vulnerability.raw_source_code_extract
      )
    )
  
  for remediation in remediations:
    base.create_db_remediation(
      db=db,
      summary=remediation.summary,
      diff=remediation.diff,
      fixes=remediation.fixes
    )
  
  analyzer = base.get_or_create_db_analyzer(
    db=db,
    id=scan.analyzer.id,
    name=scan.analyzer.name,
    version=scan.analyzer.version,
    vendor=base.get_or_create_db_vendor(
      db=db,
      name=scan.analyzer.vendor.name
    ),
    url=scan.analyzer.url
  )

  scanner = base.get_or_create_db_scanner(
    db=db,
    id=scan.scanner.id,
    name=scan.scanner.name,
    version=scan.scanner.version,
    vendor=base.get_or_create_db_vendor(
      db=db,
      name=scan.scanner.vendor.name
    ),
    url=scan.scanner.url
  )

  scan = base.create_db_scan(
    db=db,
    analyzer=analyzer,
    start_time=scan.start_time,
    end_time=scan.end_time,
    scanner=scanner,
    status=scan.status,
    type=scan.type,
  )

  return base.create_db_security_report(
    db=db,
    scan=scan,
    vulnerabilities=vulnerabilities,
    remediations=remediations,
    gl_job_id=gl_job_id
  )
from typing import Optional
from uuid import UUID
from pydantic_settings import SettingsConfigDict

from app.database.schemas import report_base as base
from app.database.schemas.detection import Job

class Communication(base.Communication):
  model_config = SettingsConfigDict(from_attributes=True)
  
  id: UUID
  scan_id: Optional[UUID]
  scan: Optional[base.Scan]

class ConfigurationOption(base.ConfigurationOption):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  scan_id: Optional[UUID]
  scan: Optional[base.Scan] 

class Vendor(base.Vendor):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  analyzers: Optional[list[base.Analyzer]]
  scanners: Optional[list[base.Scanner]]
  cvss_vectors: Optional[list[base.Scanner]]

class Analyzer(base.Analyzer):
  model_config = SettingsConfigDict(from_attributes=True)

  vendor_id: UUID
  scans: Optional[list[base.Scan]]

class Scanner(base.Scanner):
  model_config = SettingsConfigDict(from_attributes=True)

  vendor_id: UUID
  scans: Optional[list[base.Scan]]

class Identifier(base.Identifier):
  model_config = SettingsConfigDict(from_attributes=True)
  
  id: UUID
  vulnerability_id: Optional[UUID]
  vulnerability: Optional[base.Vulnerability]
  scan_id: Optional[UUID]
  scan: Optional[base.Scan]

class CVSSVector(base.CVSSVector):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  vendor_id: UUID
  vulnerabilities: Optional[list[base.Vulnerability]]

class Link(base.Link):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  vulnerabilities: Optional[list[base.Vulnerability]]

class Location(base.Location):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  vulnerability_id: UUID
  vulnerability: base.Vulnerability

class Flag(base.Flag):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  vulnerability_id: UUID
  vulnerability: base.Vulnerability

class Vulnerability(base.Vulnerability):
  model_config = SettingsConfigDict(from_attributes=True)

  vulnerability_identifier: base.VulnerabilityIdentifier
  security_report_id: Optional[UUID]
  security_report: Optional[base.SecurityReport]

class Scan(base.Scan):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  analyzer_id: UUID
  scanner_id: UUID
  security_report_id: Optional[UUID]
  security_report: Optional[base.SecurityReport]

class Remediation(base.Remediation):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  security_report_id: Optional[UUID]
  security_report: Optional[base.SecurityReport]

class VulnerabilityIdentifier(base.VulnerabilityIdentifier):
  model_config = SettingsConfigDict(from_attributes=True)

  vulnerability_id: UUID
  vulnerability: base.Vulnerability
  remediation_id: Optional[UUID]
  remediation: Optional[base.Remediation]

class SecurityReport(base.SecurityReport):
  model_config = SettingsConfigDict(from_attributes=True)

  id: UUID
  job_id: int
  job: Job
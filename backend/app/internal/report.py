from typing import Tuple, Optional
from datetime import datetime

from app.database.schemas import report

async def generate_and_save() -> Tuple[bool, Optional[report.SecurityReport]]:
  ... 
  # TODO: consider and add params
  # TODO: add behaviour
  # TODO: CRUD into database
  return True, mock()

def mock() -> report.SecurityReport:
  """Mocks a security report with details furnished from GitLab QA example (https://gitlab.com/gitlab-org/security-products/analyzers/semgrep/-/blob/main/qa/expect/js/jsx/gl-sast-report.json).
  """
  vulnerability = report.Vulnerability(
    id="d4bbd350-3b02-4915-8507-504186b3abc3",
    location=report.Location(
      file="/src/app/page.tsx",
      start_line=2,
      end_line=3,
    ),
    identifiers=[
      report.Identifier(
        type="cwe",
        name="CWE-96",
        value="96",
        url="https://cwe.mitre.org/data/definitions/96.html"
      )
    ],
    name="Improper neutralization of directives in dynamically evaluated code ('Eval Injection')",
    description="The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",
    severity="Medium",
  )

  scan = report.Scan(
    analyzer=report.Analyzer(
      id="NUS",
      name="Security Vulnerability Detection LLM",
      version=":SKIP:",
      vendor=report.Vendor(name="NUS"),
    ),
    start_time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    end_time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    scanner=report.Scanner(
      id="NUS",
      name="Security Vulnerability Detection LLM",
      version=":SKIP:",
      vendor=report.Vendor(name="NUS"),
    ),
    status="success",
    type="sast"
  )

  security_report = report.SecurityReport(
    scan=scan,
    vulnerabilities=[vulnerability]
  )

  return security_report

if __name__ == "__main__":
  import pprint
  pprint.pprint(mock_security_report().json(exclude_none=True))
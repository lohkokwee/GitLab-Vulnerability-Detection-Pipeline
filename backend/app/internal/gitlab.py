from typing import Optional, Tuple
import aiohttp
from urllib.parse import quote
from starlette.status import HTTP_200_OK

from app.config.app import settings
from app.database.schemas.gitlab import FileContent

async def get_related_files(gl_project_id: str, gl_commit_sha: str, diff: list[str]) -> Tuple[bool, Optional[list[FileContent]]]:
  async with aiohttp.ClientSession() as session:
    access_token = settings.GITLAB_ACCESS_TOKEN
    files: list[FileContent] = []
    
    for file_path in diff:
      encoded_file_path = quote(file_path, safe='')
      api_url = f"{settings.GITLAB_BASE_API_URL}/{gl_project_id}/repository/files/{encoded_file_path}/raw?ref={gl_commit_sha}"
      headers = {"Authorization": f'Bearer {access_token}'}

      async with session.get(api_url, headers=headers) as response:
        if response.status == HTTP_200_OK:
          content = await response.read()
          print(f"> Content for `${file_path}`") # TODO: remove print after more confident
          print(content)
          files.append({
            'path': file_path,
            'content': content
          })
        else:
          print(f"Failed to fetch {file_path}: {response.status}")
          return False, None

    return True, files

async def trigger_job(gl_job_id: str) -> bool:
  # TODO: add job trigger functionality
  return True